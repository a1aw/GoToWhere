{"version":3,"sources":["webpack:///./src/plugins/gtwp-kmblwb/index.js"],"names":["onload","KmbLwbEtaProvider","this","checkDatabaseUpdate","resolve","reject","localVer","$","ajax","url","cache","dataType","success","data","lastUpdatedInt","localVerInt","parseInt","version","err","console","error","fetchEta","options","log","agencyId","agency","multi","includes","splits","split","then","etaAgency","localizedAgencyName","tripIdSplits","trip","bound","routeName","route","refRoute","db","routes","routeId","paths","length","stopTimes","i","stopIndex","stop","lang","refStopId","locale","method","resp","etaTime","sche","entities","updates","alerts","tripDesc","timestamp","Date","generated","sches","response","text","t","toLowerCase","hr","substring","min","isNaN","updated","setHours","setMinutes","push","time","getTime","langCode","alertText","transText","language","translation","now","vehicleDesc","label","entity","id","vehicle","header","incrementality","err0","err1","err2","fetchDatabase","stops"],"mappings":"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","file":"49.df66eb6f969bad62298d.js","sourcesContent":["//GTWP KMBLWB ETA Plugin\r\n\r\nimport * as TransitEta from '../../gtw-citydata-transit-eta';\r\nimport * as Cors from '../../gtw-cors';\r\nimport * as gtfs from '../../gtw-citydata-transit-gtfs';\r\nimport * as Lang from '../../gtw-lang';\r\nimport * as RequestLimiter from '../../gtw-requestlimiter';\r\n\r\nexport function onload() {\r\n    Cors.register(\"db.kmbeta.ml\", true);\r\n    Cors.register(\"etav3.kmb.hk\", false);\r\n    TransitEta.registerProvider(\"gtwp-kmblwb\", \"kmblwb\", [\"KMB\", \"LWB\"], new KmbLwbEtaProvider());\r\n    return true;\r\n}\r\n\r\nfunction parseIsoDatetime(dtstr) {\r\n    var dt = dtstr.split(/[: T-]/).map(parseFloat);\r\n    return new Date(dt[0], dt[1] - 1, dt[2], dt[3] || 0, dt[4] || 0, dt[5] || 0, 0);\r\n}\r\n\r\nvar KmbLwbEtaProvider = function () {\r\n\r\n    this.checkDatabaseUpdate = function (resolve, reject, localVer) {\r\n        $.ajax({\r\n            url: \"https://db.kmbeta.ml/kmbeta_db-version.json\",\r\n            cache: false,\r\n            dataType: \"json\",\r\n            success: function (data) {\r\n                var lastUpdatedInt;\r\n                var localVerInt;\r\n                try {\r\n                    lastUpdatedInt = parseInt(data.version);\r\n                    localVerInt = parseInt(localVer);\r\n                } catch (err) {\r\n                    console.error(\"Error: Could not parse kmbeta_db last updated time or cached version! Forcing to be no update\");\r\n                    resolve(false);\r\n                }\r\n                resolve(lastUpdatedInt > localVerInt);\r\n            },\r\n            error: function (err) {\r\n                console.error(\"Error: Could not check kmbeta_db update!\");\r\n                resolve(false);\r\n            }\r\n        });\r\n    };\r\n\r\n    this.fetchEta = function (resolve, reject, options) {\r\n        console.log(options);\r\n        var agencyId = options.agency[\"agency_id\"];\r\n        var multi = false;\r\n        if (agencyId.includes(\"+\")) {\r\n            multi = true;\r\n            var splits = agencyId.split(\"+\");\r\n            for (var split of splits) {\r\n                if (split === \"KMB\" || split === \"LWB\") {\r\n                    agencyId = split;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (agencyId !== \"KMB\" && agencyId !== \"LWB\") {\r\n            console.error(\"Error: Cannot request ETA from companies that are not KMB and LWB! Requested: \" + agencyId);\r\n            reject();\r\n            return;\r\n        }\r\n\r\n        gtfs.getAgency(\"gtwp-hktransit\", \"hktransit\", agencyId).then(etaAgency => {\r\n            var localizedAgencyName = Lang.localizedKey(etaAgency, \"agency_short_name\");\r\n\r\n            var tripIdSplits = options.trip[\"trip_id\"].split(\"-\");\r\n            var bound = parseInt(tripIdSplits[1]);\r\n            var routeName = options.route[\"route_short_name\"];\r\n\r\n            var refRoute = false;\r\n            for (var route of this.db.routes) {\r\n                if (route.routeId === routeName) {\r\n                    refRoute = route;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!refRoute) {\r\n                console.error(\"Error: Could not find KMBLWB reference route using \" + routeName);\r\n                reject();\r\n                return;\r\n            }\r\n\r\n            if (refRoute.paths[bound - 1].length !== options.stopTimes.length) {\r\n                console.error(\"Error: KMBLWB reference route path mismatch with stop times.\");\r\n                reject();\r\n                return;\r\n            }\r\n\r\n            var stopIndex = -1;\r\n            var i;\r\n            for (i = 0; i < options.stopTimes.length; i++) {\r\n                if (options.stopTimes[i][\"stop_id\"] === options.stop[\"stop_id\"]) {\r\n                    stopIndex = i;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (stopIndex === -1) {\r\n                console.error(\"Error: Could not find KMBLWB stop index in stop times!\");\r\n                reject();\r\n                return;\r\n            }\r\n\r\n            var refStopId = refRoute.paths[bound - 1][stopIndex];\r\n\r\n            var locale = Lang.getLocale();\r\n\r\n            var lang;\r\n            if (locale === \"zh\") {\r\n                lang = \"tc\";\r\n            } else {\r\n                lang = \"en\";\r\n            }\r\n\r\n            var url =\r\n                \"http://etav3.kmb.hk/\" +\r\n                \"?action=geteta\" +\r\n                \"&lang=\" + lang +\r\n                \"&route=\" + routeName +\r\n                \"&bound=\" + bound +\r\n                \"&stop=\" + refStopId +\r\n                \"&stop_seq=\" + (stopIndex + 1);\r\n            \r\n            $.ajax({\r\n                url: url,\r\n                method: \"GET\",\r\n                dataType: \"json\",\r\n                cache: false,\r\n                success: function (resp) {\r\n                    var entities = [];\r\n\r\n                    var updates = [];\r\n                    var alerts = [];\r\n\r\n                    //TODO get start_time and start_date from gtfs db\r\n                    var tripDesc = {\r\n                        \"tripId\": options.trip[\"trip_id\"],\r\n                        \"startTime\": \"00:00:00\",\r\n                        \"startDate\": \"20190101\"\r\n                    };\r\n\r\n                    var timestamp = new Date(resp.generated);\r\n\r\n                    var sches = resp.response;\r\n                    if (sches && sches.length > 0) {\r\n                        var i;\r\n                        var etaTime;\r\n                        var sche;\r\n                        for (i = 0; i < sches.length; i++) {\r\n                            sche = sches[i];\r\n\r\n                            etaTime = false;\r\n                            var text = sche.t.toLowerCase();\r\n\r\n                            if (text.length >= 5) {\r\n                                var hr = parseInt(text.substring(0, 2));\r\n                                var min = parseInt(text.substring(3, 5));\r\n                                if (!isNaN(hr) && !isNaN(min)) {\r\n                                    etaTime = new Date(resp.updated);\r\n                                    etaTime.setHours(hr);\r\n                                    etaTime.setMinutes(min);\r\n                                }\r\n                            }\r\n\r\n                            if (etaTime) {\r\n                                updates.push({\r\n                                    \"stopId\": options.stop[\"stop_id\"],\r\n                                    \"arrival\": {\r\n                                        time: etaTime.getTime()\r\n                                    }\r\n                                });\r\n                            } else if (text.length > 0) {\r\n                                var langCode;\r\n                                if (lang === \"tc\") {\r\n                                    langCode = \"zh-HK\";\r\n                                } else {\r\n                                    langCode = \"en\";\r\n                                }\r\n\r\n                                var alertText = \"\";\r\n                                if (multi) {\r\n                                    alertText += localizedAgencyName + \": \";\r\n                                }\r\n                                alertText += sche.t;\r\n\r\n                                var transText = [{\r\n                                    text: alertText,\r\n                                    language: langCode\r\n                                }];\r\n                                alerts.push({\r\n                                    \"informedEntity\": [\r\n                                        {\r\n                                            trip: tripDesc,\r\n                                            \"stop_id\": options.stop[\"stop_id\"]\r\n                                        }\r\n                                    ],\r\n                                    \"headerText\": {\r\n                                        translation: transText\r\n                                    },\r\n                                    \"descriptionText\": {\r\n                                        translation: transText\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    var time = Date.now();\r\n                    if (updates.length > 0) {\r\n                        var vehicleDesc = {\r\n                            label: localizedAgencyName\r\n                        };\r\n                        var entityId = options.agency[\"agency_id\"] + \"-\" + options.stop[\"stop_id\"] + \"-\" + options.route[\"route_short_name\"] + \"-trip-update-\" + time;\r\n                        var entity = {\r\n                            id: entityId,\r\n                            \"tripUpdate\": {\r\n                                trip: tripDesc,\r\n                                timestamp: timestamp,\r\n                                \"stopTimeUpdate\": updates\r\n                            }\r\n                        };\r\n                        if (multi) {\r\n                            entity.vehicle = {\r\n                                vehicle: vehicleDesc\r\n                            };\r\n                        }\r\n                        entities.push(entity);\r\n                    }\r\n\r\n                    if (alerts.length > 0) {\r\n                        var i;\r\n                        for (i = 0; i < alerts.length; i++) {\r\n                            var entityId = options.agency[\"agency_id\"] + \"-\" + options.stop[\"stop_id\"] + \"-\" + options.route[\"route_short_name\"] + \"-alert-\" + i + \"-\" + time;\r\n                            var entity = {\r\n                                id: entityId,\r\n                                \"alert\": alerts[i]\r\n                            };\r\n                            entities.push(entity);\r\n                        }\r\n                    }\r\n\r\n                    var feed = {\r\n                        header: {\r\n                            \"gtfsRealtimeVersion\": \"2.0\",\r\n                            incrementality: \"FULL_DATASET\",\r\n                            timestamp: time\r\n                        },\r\n                        entity: entities\r\n                    };\r\n\r\n                    resolve(feed);\r\n                },\r\n                error: function (err0, err1, err2) {\r\n                    reject();\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    this.fetchDatabase = function (resolve, reject) {\r\n        $.ajax({\r\n            url: \"https://db.kmbeta.ml/kmbeta_db.json\",\r\n            cache: false,\r\n            dataType: \"json\",\r\n            success: function (data) {\r\n                if (!data.routes || !data.stops || !data.version) {\r\n                    console.error(\"Error: KMBLWB downloaded database is in wrong structure! Report to GitHub for this problem!\");\r\n                    return;\r\n                }\r\n                data[\"package\"] = \"gtwp-kmblwb\";\r\n                data[\"provider\"] = \"kmblwb\";\r\n                resolve(data);\r\n            },\r\n            error: function (err, err1, err2) {\r\n                reject();\r\n            }\r\n        });\r\n    };\r\n};"],"sourceRoot":""}